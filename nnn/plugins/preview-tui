#!/usr/bin/env sh

# Description: Terminal based file previewer
#
# Shell: POSIX compliant
# Authors: Todd Yamakawa, LÃ©o Villeveygoux, @Recidiviste, Mario Ortiz Manero, Luuk van Baal, @WanderLanz

#SPLIT="$SPLIT"  # you can set a permanent split here
#TERMINAL="$TERMINAL"  # same goes for the terminal
DEBUG_LOG=0  # set to 1 to enable logging for debug purposes
USE_SCOPE="${USE_SCOPE:-0}"
USE_PISTOL="${USE_PISTOL:-0}"
PAGER="${PAGER:-less -P?n -R}"
TMPDIR="${TMPDIR:-/tmp}"
BAT_STYLE="${BAT_STYLE:-numbers}"
BAT_THEME="${BAT_THEME:-ansi}"
NNN_PREVIEWDIR="$XDG_CACHE_HOME/nnn/previews}"
NNN_PREVIEWWIDTH="${NNN_PREVIEWWIDTH:-1920}"
NNN_PREVIEWHEIGHT="${NNN_PREVIEWHEIGHT:-1080}"
NNN_PARENT="${NNN_FIFO#*.}"
[ "$NNN_PARENT" -eq "$NNN_PARENT" ] 2>/dev/null || NNN_PARENT=""
FIFOPID="$TMPDIR/nnn-preview-tui-fifopid.$NNN_PARENT"
PREVIEWPID="$TMPDIR/nnn-preview-tui-pagerpid.$NNN_PARENT"
CURSEL="$TMPDIR/nnn-preview-tui-selection.$NNN_PARENT"

if [ "$DEBUG_LOG" -eq 0 ]; then
    DEBUG_LOGFILE="/dev/null"
else
    DEBUG_LOGFILE="${TMPDIR}/preview-tui-log"
fi

start_preview() {
    [ "$PAGER" = "most" ] && PAGER="less -R"

    if [ -z "$SPLIT" ] && [ $(($(tput lines < "$TTY") * 2)) -gt "$(tput cols < "$TTY")" ]; then
        SPLIT='h'
    elif [ "$SPLIT" != 'h' ]; then
        SPLIT='v'
    fi

    kitty @ goto-layout splits
    # Trying to use kitty's integrated window management as the split window. All
    # environmental variables that will be used in the new window must be explicitly passed.

    kitty @ launch --no-response --title "nnn preview" --keep-focus \
        --cwd "$PWD" --env "PATH=$PATH" --env "NNN_FIFO=$NNN_FIFO" \
        --env "PREVIEW_MODE=1" --env "PAGER=$PAGER" --env "TMPDIR=$TMPDIR" \
        --env "SPLIT=$SPLIT" --env "TERMINAL=$TERMINAL"\
        --env "PREVIEWPID=$PREVIEWPID" \
        --env "NNN_PREVIEWHEIGHT=$NNN_PREVIEWHEIGHT" \
        --env "NNN_PREVIEWWIDTH=$NNN_PREVIEWWIDTH" --env "NNN_PREVIEWDIR=$NNN_PREVIEWDIR" \
        --env "BAT_STYLE=$BAT_STYLE" --env "BAT_THEME=$BAT_THEME" \
        --env "FIFOPID=$FIFOPID" --env TTY="$TTY" \
        --env "CURSEL=$CURSEL" --location "${SPLIT}split" "$0" "$1"
} > "$DEBUG_LOGFILE" 2>&1

toggle_preview() {
    if kill "$(cat "$FIFOPID")"; then
        [ -p "$NNN_PPIPE" ] && printf "0" > "$NNN_PPIPE"
        kill "$(cat "$PREVIEWPID")"
    else
        [ -p "$NNN_PPIPE" ] && printf "1" > "$NNN_PPIPE"
        start_preview "$1" "$QLPATH"
    fi
} > "$DEBUG_LOGFILE" 2>&1

exists() {
    type "$1" > /dev/null
}

fifo_pager() {
    cmd="$1"
    shift

    # We use a FIFO to access $PAGER PID in jobs control
    tmpfifopath="$TMPDIR/nnn-preview-tui-fifo.$$"
    mkfifo "$tmpfifopath" || return

    $PAGER < "$tmpfifopath" &
    printf "%s" "$!" > "$PREVIEWPID"

    (
        exec > "$tmpfifopath"
        if [ "$cmd" = "pager" ]; then
            if exists bat; then
                bat --terminal-width="$(tput cols < "$TTY")" --decorations=always --color=always \
                    --paging=never --style="$BAT_STYLE" --theme="$BAT_THEME" "$@" &
            else
                $PAGER "$@" &
            fi
        else
            "$cmd" "$@" &
        fi
    )

    rm "$tmpfifopath"
} 2> "$DEBUG_LOGFILE"

# Binary file: show file info inside the pager
print_bin_info() {
    printf -- "-------- \033[1;31mBinary file\033[0m --------\n"
    if exists mediainfo; then
        mediainfo "$1"
    else
        file -b "$1"
    fi
} 2> "$DEBUG_LOGFILE"

handle_mime() {
    case "$2" in
        image/jpeg) image_preview "$cols" "$lines" "$1" ;;
        image/gif) generate_preview "$cols" "$lines" "$1" "gif" ;;
        image/vnd.djvu) generate_preview "$cols" "$lines" "$1" "djvu" ;;
        image/*) generate_preview "$cols" "$lines" "$1" "image" ;;
        video/*) generate_preview "$cols" "$lines" "$1" "video" ;;
        audio/*) generate_preview "$cols" "$lines" "$1" "audio" ;;
        application/font*|application/*opentype|font/*) generate_preview "$cols" "$lines" "$1" "font" ;;
        */*office*|*/*document*) generate_preview "$cols" "$lines" "$1" "office" ;;
        application/zip) fifo_pager unzip -l "$1" ;;
        text/troff) fifo_pager man -Pcat -l "$1" ;;
        *) handle_ext "$1" "$3" "$4" ;;
    esac
}

handle_ext() {
    case "$2" in
        epub) generate_preview "$cols" "$lines" "$1" "epub" ;;
        pdf) generate_preview "$cols" "$lines" "$1" "pdf" ;;
        gz|bz2) fifo_pager tar -tvf "$1" ;;
        md) fifo_pager lowdown -Tterm "$1" ;;
        htm|html|xhtml) fifo_pager w3m "$1" ;;
        7z|a|ace|alz|arc|arj|bz|cab|cpio|deb|jar|lha|lz|lzh|lzma|lzo\
        |rar|rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z)
            fifo_pager bsdtar -tvf "$1" ;;
        *) if [ "$3" = "bin" ]; then
               fifo_pager print_bin_info "$1"
           else
               fifo_pager pager "$1"
           fi ;;
    esac
}

preview_file() {
    clear

    # Detecting the exact type of the file: the encoding, mime type, and extension in lowercase.
    encoding="$(file -bL --mime-encoding -- "$1")"
    mimetype="$(file -bL --mime-type -- "$1")"
    ext="${1##*.}"
    [ -n "$ext" ] && ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
    lines=$(tput lines < "$TTY")
    cols=$(tput cols < "$TTY")

    # Otherwise, falling back to the defaults.
    if [ -d "$1" ]; then
        cd "$1" || return
        fifo_pager tree --filelimit "$(find . -maxdepth 1 | wc -l)" -L 3 -F --dirsfirst --noreport | head -n "$((lines - 3))" | "$(dirname "$0")"/.iconlookup -l "$cols" -B "\n" -b " "
    elif [ "${encoding#*)}" = "binary" ]; then
        handle_mime "$1" "$mimetype" "$ext" "bin"
    else
        handle_mime "$1" "$mimetype" "$ext"
    fi
} 2> "$DEBUG_LOGFILE"

generate_preview() {
  if [ ! -f "$NNN_PREVIEWDIR/$3.jpg" ] || [ -n "$(find -L "$3" -newer "$NNN_PREVIEWDIR/$3.jpg")" ]; then
        mkdir -p "$NNN_PREVIEWDIR/${3%/*}"
        case $4 in
            audio) ffmpeg -i "$3" -filter_complex "scale=iw*min(1\,min($NNN_PREVIEWWIDTH/iw\,ih)):-1" "$NNN_PREVIEWDIR/$3.jpg" -y ;;
            epub) gnome-epub-thumbnailer "$3" "$NNN_PREVIEWDIR/$3.jpg" ;;
            font) fontpreview -i "$3" -o "$NNN_PREVIEWDIR/$3.jpg" ;;
            gif) exec > /dev/tty
                 image_preview "$1" "$2" "$3"
                 return ;;
            image) convert "$3" -flatten -resize "$NNN_PREVIEWWIDTH"x"$NNN_PREVIEWHEIGHT"\> "$NNN_PREVIEWDIR/$3.jpg" ;;
            office) libreoffice --convert-to jpg "$3" --outdir "$NNN_PREVIEWDIR/${3%/*}"
                    filename="$(printf "%s" "${3##*/}" | cut -d. -f1)"
                    mv "$NNN_PREVIEWDIR/${3%/*}/$filename.jpg" "$NNN_PREVIEWDIR/$3.jpg" ;;
            pdf) pdftoppm -jpeg -f 1 -singlefile "$3" "$NNN_PREVIEWDIR/$3" ;;
	        djvu) ddjvu -format=ppm -page=1 "$3" "$NNN_PREVIEWDIR/$3.jpg" ;;
            video) ffmpegthumbnailer -s0 -i "$3" -o "$NNN_PREVIEWDIR/$3.jpg" || rm "$NNN_PREVIEWDIR/$3.jpg" ;;
        esac
    fi > "$DEBUG_LOGFILE"

    if [ -f "$NNN_PREVIEWDIR/$3.jpg" ]; then
        image_preview "$1" "$2" "$NNN_PREVIEWDIR/$3.jpg"
    else
        fifo_pager print_bin_info "$3"
    fi
} 2> "$DEBUG_LOGFILE"

image_preview() {
    clear
    # Kitty terminal users can use the native image preview method
    kitty +kitten icat --silent --place "$1"x"$2"@0x0 --transfer-mode=stream --stdin=no "$3" &
    printf "%s" "$!" > "$PREVIEWPID"
} 2> "$DEBUG_LOGFILE"

winch_handler() {
    clear
    kill "$(cat "$PREVIEWPID")"
    preview_file "$(cat "$CURSEL")"
} 2> "$DEBUG_LOGFILE"

preview_fifo() {
    while read -r selection; do
        if [ -n "$selection" ]; then
            kill "$(cat "$PREVIEWPID")"
            [ "$selection" = "close" ] && break
            preview_file "$selection"
            printf "%s" "$selection" > "$CURSEL"
        fi
    done < "$NNN_FIFO"
    sleep 0.1 # make sure potential preview by winch_handler is killed
    pkill -P "$$"
} 2> "$DEBUG_LOGFILE"

if [ "$PREVIEW_MODE" ]; then
    preview_file "$PWD/$1"
    preview_fifo &
    printf "%s" "$!" > "$FIFOPID"
    printf "%s" "$PWD/$1" > "$CURSEL"
    trap 'winch_handler; wait' WINCH
    trap 'rm "$PREVIEWPID" "$CURSEL" "$FIFOPID" 2> /dev/null' INT HUP EXIT
    wait "$!" 2> /dev/null
    exit 0
else
    TTY="$(tty)"
    TTY="$TTY" toggle_preview "$1" &
fi
